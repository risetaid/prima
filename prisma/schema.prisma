generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String               @id @default(uuid())
  stackId                   String               @unique @map("stack_id") // Changed from clerkId to stackId
  clerkId                   String?              @map("clerk_id") // Keep for migration, make optional
  email                     String               @unique
  firstName                 String?              @map("first_name")
  lastName                  String?              @map("last_name")
  phoneNumber               String?              @map("phone_number")
  role                      UserRole             @default(MEMBER)
  isActive                  Boolean              @default(true) @map("is_active")
  isApproved                Boolean              @default(false) @map("is_approved")
  approvedAt                DateTime?            @map("approved_at")
  approvedBy                String?              @map("approved_by")
  lastLoginAt               DateTime?            @map("last_login_at")
  createdAt                 DateTime             @default(now()) @map("created_at")
  updatedAt                 DateTime             @updatedAt @map("updated_at")
  approver                  User?                @relation("UserApprovals", fields: [approvedBy], references: [id])
  approvedUsers             User[]               @relation("UserApprovals")
  educationalArticles       EducationalArticle[]
  manualConfirmations       ManualConfirmation[]
  medicalRecords            MedicalRecord[]
  patientMedicationsCreated PatientMedication[]
  patientsManaged           Patient[]            @relation("VolunteerPatients")
  reminderSchedulesCreated  ReminderSchedule[]
  loginLogs                 UserLoginLog[]
  volunteerMetrics          VolunteerMetric[]

  @@map("users")
}

model Patient {
  id                    String               @id @default(uuid())
  name                  String
  phoneNumber           String               @map("phone_number")
  address               String?
  birthDate             DateTime?            @map("birth_date")
  diagnosisDate         DateTime?            @map("diagnosis_date")
  cancerStage           CancerStage?         @map("cancer_stage")
  assignedVolunteerId   String?              @map("assigned_volunteer_id")
  emergencyContactName  String?              @map("emergency_contact_name")
  emergencyContactPhone String?              @map("emergency_contact_phone")
  notes                 String?
  photoUrl              String?              @map("photo_url")
  isActive              Boolean              @default(true) @map("is_active")
  deletedAt             DateTime?            @map("deleted_at")
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
  appointments          Appointment[]
  contentAccessLogs     ContentAccessLog[]
  manualConfirmations   ManualConfirmation[]
  medicalRecords        MedicalRecord[]
  patientMedications    PatientMedication[]
  patientMetrics        PatientMetric[]
  patientSymptoms       PatientSymptom[]
  assignedVolunteer     User?                @relation("VolunteerPatients", fields: [assignedVolunteerId], references: [id])
  reminderLogs          ReminderLog[]
  reminderSchedules     ReminderSchedule[]

  @@map("patients")
}

model MedicalRecord {
  id             String            @id @default(uuid())
  patientId      String            @map("patient_id")
  recordType     MedicalRecordType @map("record_type")
  title          String
  description    String
  recordedDate   DateTime          @map("recorded_date")
  recordedBy     String            @map("recorded_by")
  createdAt      DateTime          @default(now()) @map("created_at")
  patient        Patient           @relation(fields: [patientId], references: [id])
  recordedByUser User              @relation(fields: [recordedBy], references: [id])

  @@map("medical_records")
}

model Medication {
  id                 String              @id @default(uuid())
  name               String
  genericName        String?             @map("generic_name")
  description        String?
  commonDosages      String[]            @map("common_dosages")
  sideEffects        String?             @map("side_effects")
  instructions       String?
  createdAt          DateTime            @default(now()) @map("created_at")
  patientMedications PatientMedication[]

  @@map("medications")
}

model PatientMedication {
  id                String             @id @default(uuid())
  patientId         String             @map("patient_id")
  medicationId      String             @map("medication_id")
  dosage            String
  frequency         String
  instructions      String?
  startDate         DateTime           @map("start_date")
  endDate           DateTime?          @map("end_date")
  isActive          Boolean            @default(true) @map("is_active")
  prescribedBy      String?            @map("prescribed_by")
  createdBy         String             @map("created_by")
  createdAt         DateTime           @default(now()) @map("created_at")
  createdByUser     User               @relation(fields: [createdBy], references: [id])
  medication        Medication         @relation(fields: [medicationId], references: [id])
  patient           Patient            @relation(fields: [patientId], references: [id])
  reminderSchedules ReminderSchedule[]

  @@map("patient_medications")
}

model ReminderSchedule {
  id                  String               @id @default(uuid())
  patientId           String               @map("patient_id")
  medicationName      String               @map("medication_name")
  scheduledTime       String               @map("scheduled_time")
  frequency           Frequency            @default(DAILY)
  startDate           DateTime             @map("start_date")
  endDate             DateTime?            @map("end_date")
  customMessage       String?              @map("custom_message")
  isActive            Boolean              @default(true) @map("is_active")
  createdById         String               @map("created_by_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  patientMedicationId String?
  manualConfirmations ManualConfirmation[]
  reminderLogs        ReminderLog[]
  createdByUser       User                 @relation(fields: [createdById], references: [id])
  PatientMedication   PatientMedication?   @relation(fields: [patientMedicationId], references: [id])
  patient             Patient              @relation(fields: [patientId], references: [id])

  @@map("reminder_schedules")
}

model ReminderLog {
  id                  String               @id @default(uuid())
  reminderScheduleId  String?              @map("reminder_schedule_id")
  patientId           String               @map("patient_id")
  message             String
  phoneNumber         String               @map("phone_number")
  sentAt              DateTime             @map("sent_at")
  twilioMessageId     String?              @map("twilio_message_id")
  fonnteMessageId     String?              @map("fonnte_message_id")
  status              ReminderStatus       @default(PENDING)
  errorMessage        String?              @map("error_message")
  patientResponse     String?              @map("patient_response")
  responseReceivedAt  DateTime?            @map("response_received_at")
  createdAt           DateTime             @default(now()) @map("created_at")
  manualConfirmations ManualConfirmation[]
  patient             Patient              @relation(fields: [patientId], references: [id])
  reminderSchedule    ReminderSchedule?    @relation(fields: [reminderScheduleId], references: [id])

  @@map("reminder_logs")
}

model PatientSymptom {
  id          String   @id @default(uuid())
  patientId   String   @map("patient_id")
  symptomText String   @map("symptom_text")
  recordedAt  DateTime @map("recorded_at")
  createdAt   DateTime @default(now()) @map("created_at")
  patient     Patient  @relation(fields: [patientId], references: [id])

  @@map("patient_symptoms")
}

model ManualConfirmation {
  id                 String            @id @default(uuid())
  patientId          String            @map("patient_id")
  volunteerId        String            @map("volunteer_id")
  reminderScheduleId String?           @map("reminder_schedule_id")
  reminderLogId      String?           @map("reminder_log_id")
  visitDate          DateTime          @map("visit_date")
  visitTime          String            @map("visit_time")
  medicationsTaken   Boolean           @map("medications_taken")
  medicationsMissed  String[]          @map("medications_missed")
  patientCondition   PatientCondition  @map("patient_condition")
  symptomsReported   String[]          @map("symptoms_reported")
  notes              String?
  followUpNeeded     Boolean           @default(false) @map("follow_up_needed")
  followUpNotes      String?           @map("follow_up_notes")
  confirmedAt        DateTime          @default(now()) @map("confirmed_at")
  patient            Patient           @relation(fields: [patientId], references: [id])
  reminderLog        ReminderLog?      @relation(fields: [reminderLogId], references: [id])
  reminderSchedule   ReminderSchedule? @relation(fields: [reminderScheduleId], references: [id])
  volunteer          User              @relation(fields: [volunteerId], references: [id])

  @@map("manual_confirmations")
}

model Appointment {
  id              String            @id @default(uuid())
  patientId       String            @map("patient_id")
  appointmentType AppointmentType   @map("appointment_type")
  scheduledDate   DateTime          @map("scheduled_date")
  scheduledTime   String            @map("scheduled_time")
  location        String?
  doctorName      String?           @map("doctor_name")
  status          AppointmentStatus @default(SCHEDULED)
  reminderSent    Boolean           @default(false) @map("reminder_sent")
  notes           String?
  createdBy       String            @map("created_by")
  createdAt       DateTime          @default(now()) @map("created_at")
  patient         Patient           @relation(fields: [patientId], references: [id])

  @@map("appointments")
}

model PatientMetric {
  id                    String   @id @default(uuid())
  patientId             String   @map("patient_id")
  metricDate            DateTime @map("metric_date")
  remindersSent         Int      @default(0) @map("reminders_sent")
  remindersAcknowledged Int      @default(0) @map("reminders_acknowledged")
  medicationsTaken      Int      @default(0) @map("medications_taken")
  medicationsMissed     Int      @default(0) @map("medications_missed")
  complianceRate        Float    @default(0) @map("compliance_rate")
  calculatedAt          DateTime @default(now()) @map("calculated_at")
  patient               Patient  @relation(fields: [patientId], references: [id])

  @@map("patient_metrics")
}

model VolunteerMetric {
  id                       String   @id @default(uuid())
  volunteerId              String   @map("volunteer_id")
  periodStart              DateTime @map("period_start")
  periodEnd                DateTime @map("period_end")
  patientsManaged          Int      @default(0) @map("patients_managed")
  visitsConducted          Int      @default(0) @map("visits_conducted")
  averagePatientCompliance Float    @default(0) @map("average_patient_compliance")
  postsCreated             Int      @default(0) @map("posts_created")
  calculatedAt             DateTime @default(now()) @map("calculated_at")
  volunteer                User     @relation(fields: [volunteerId], references: [id])

  @@map("volunteer_metrics")
}

model ContentAccessLog {
  id          String       @id @default(uuid())
  postSlug    String       @map("post_slug")
  patientId   String?      @map("patient_id")
  accessedVia AccessSource @map("accessed_via")
  accessedAt  DateTime     @default(now()) @map("accessed_at")
  timeSpent   Int?         @map("time_spent")
  patient     Patient?     @relation(fields: [patientId], references: [id])

  @@map("content_access_logs")
}

model SystemSetting {
  key         String   @id
  value       String
  description String?
  updatedBy   String   @map("updated_by")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

model WhatsAppTemplate {
  id           String           @id @default(uuid())
  templateName String           @unique @map("template_name")
  templateText String           @map("template_text")
  variables    String[]
  category     TemplateCategory
  isActive     Boolean          @default(true) @map("is_active")
  createdBy    String           @map("created_by")
  createdAt    DateTime         @default(now()) @map("created_at")

  @@map("whatsapp_templates")
}

model UserLoginLog {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  loginTime DateTime @default(now()) @map("login_time")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  location  String?
  device    String?
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_login_logs")
}

model EducationalArticle {
  id            String          @id @default(uuid())
  title         String
  description   String?
  url           String
  category      ArticleCategory
  tags          String[]
  isActive      Boolean         @default(true) @map("is_active")
  createdBy     String          @map("created_by")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  createdByUser User            @relation(fields: [createdBy], references: [id])

  @@map("educational_articles")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum CancerStage {
  I
  II
  III
  IV
}

enum MedicalRecordType {
  DIAGNOSIS
  TREATMENT
  PROGRESS
}

enum Frequency {
  DAILY
  WEEKLY
  CUSTOM
}

enum ReminderStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum PatientCondition {
  GOOD
  FAIR
  POOR
}

enum AppointmentType {
  CHECKUP
  CHEMOTHERAPY
  CONSULTATION
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum AccessSource {
  REMINDER
  DIRECT
  SEARCH
}

enum TemplateCategory {
  REMINDER
  APPOINTMENT
  EDUCATIONAL
}

enum ArticleCategory {
  MEDICATION
  NUTRITION
  EXERCISE
  MENTAL_HEALTH
  SYMPTOMS
  TREATMENT
  LIFESTYLE
}
