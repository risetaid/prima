'use client'

import { useState, useEffect, useCallback } from 'react'
import { Search, Filter, FileText, Play, ChevronDown, X, Eye, ExternalLink } from 'lucide-react'
import { Badge } from '@/components/ui/badge'
import Image from 'next/image'

interface ContentItem {
  id: string
  title: string
  slug: string
  description?: string
  category: string
  tags: string[]
  publishedAt: Date | null
  createdAt: Date
  type: 'article' | 'video'
  thumbnailUrl?: string
  url: string
  excerpt?: string
  videoUrl?: string
  durationMinutes?: string
}

interface Category {
  value: string
  label: string
  icon: string
}

interface ContentSelectorProps {
  selectedContent: ContentItem[]
  onContentChange: (content: ContentItem[]) => void
  maxSelection?: number
  className?: string
}

export function ContentSelector({ 
  selectedContent, 
  onContentChange, 
  maxSelection = 5,
  className = '' 
}: ContentSelectorProps) {
  const [isExpanded, setIsExpanded] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [content, setContent] = useState<ContentItem[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [imageErrors, setImageErrors] = useState<Set<string>>(new Set())
  
  // Filter states
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('')
  const [selectedType, setSelectedType] = useState<'all' | 'article' | 'video'>('all')
  const [showFilters, setShowFilters] = useState(false)
  
  // Pagination
  const [hasMore, setHasMore] = useState(true)
  const [page, setPage] = useState(1)

  // Fetch content from API
  const fetchContent = useCallback(async (reset = false) => {
    setLoading(true)
    setError(null)
    
    try {
      const params = new URLSearchParams({
        page: reset ? '1' : page.toString(),
        limit: '10',
        search: searchQuery,
        category: selectedCategory,
        type: selectedType
      })

      const response = await fetch(`/api/cms/published-content?${params}`)
      if (!response.ok) {
        throw new Error('Failed to fetch content')
      }

      const data = await response.json()
      if (data.success) {
        if (reset) {
          setContent(data.data)
          setPage(1)
        } else {
          setContent(prev => [...prev, ...data.data])
        }
        setHasMore(data.pagination.hasMore)
      } else {
        setError(data.error || 'Failed to fetch content')
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch content')
    } finally {
      setLoading(false)
    }
  }, [searchQuery, selectedCategory, selectedType, page])

  // Fetch categories
  const fetchCategories = useCallback(async () => {
    try {
      const response = await fetch('/api/cms/published-content/categories')
      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          setCategories(data.categories)
        }
      }
    } catch (err) {
      console.warn('Failed to fetch categories:', err)
    }
  }, [])

  // Load content when expanded or filters change
  useEffect(() => {
    if (isExpanded) {
      fetchContent(true)
    }
  }, [isExpanded, searchQuery, selectedCategory, selectedType])

  // Load categories on mount
  useEffect(() => {
    fetchCategories()
  }, [])

  // Handle content selection
  const handleContentToggle = (item: ContentItem) => {
    const isSelected = selectedContent.some(c => c.id === item.id)
    
    if (isSelected) {
      onContentChange(selectedContent.filter(c => c.id !== item.id))
    } else {
      if (selectedContent.length < maxSelection) {
        onContentChange([...selectedContent, item])
      }
    }
  }

  // Clear all selections
  const clearSelection = () => {
    onContentChange([])
  }

  // Load more content
  const loadMore = () => {
    if (!loading && hasMore) {
      setPage(prev => prev + 1)
      fetchContent()
    }
  }

  const getCategoryIcon = (category: string) => {
    const categoryData = categories.find(c => c.value === category)
    return categoryData?.icon || '📄'
  }

  const getCategoryLabel = (category: string) => {
    const categoryData = categories.find(c => c.value === category)
    return categoryData?.label || category
  }

  try {
    if (!isExpanded) {
      return (
        <div className={`bg-white border border-gray-200 rounded-2xl p-4 ${className}`}>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <FileText className="w-5 h-5 text-blue-600" />
            <h3 className="text-base font-medium text-gray-900">
              Lampiran Konten
            </h3>
            {selectedContent.length > 0 && (
              <Badge variant="secondary" className="ml-2">
                {selectedContent.length}
              </Badge>
            )}
          </div>
          <button
            className="flex items-center space-x-2 px-3 py-2 text-sm text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
          >
            <span>Pilih Konten</span>
            <ChevronDown className="w-4 h-4" />
          </button>
        </div>

        {/* Selected Content Preview */}
        {selectedContent.length > 0 && (
          <div className="mt-4 space-y-2">
            {selectedContent.map(item => (
              <div key={item.id} className="flex items-center justify-between p-2 bg-blue-50 rounded-lg">
                <div className="flex items-center space-x-2">
                  {item.type === 'article' ? (
                    <FileText className="w-4 h-4 text-blue-600" />
                  ) : (
                    <Play className="w-4 h-4 text-blue-600" />
                  )}
                  <span className="text-sm font-medium text-gray-900 truncate">
                    {item.title}
                  </span>
                  <Badge variant="outline">
                    {getCategoryLabel(item.category)}
                  </Badge>
                </div>
                <button
                  className="p-1 text-gray-400 hover:text-red-600 transition-colors"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            ))}
            <button
              type="button"
              onClick={clearSelection}
              className="text-xs text-red-600 hover:text-red-800 transition-colors"
            >
              Hapus Semua ({selectedContent.length})
            </button>
          </div>
        )}
      </div>
    )
  }

  return (
    <div className={`bg-white border border-gray-200 rounded-2xl ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <div className="flex items-center space-x-2">
          <FileText className="w-5 h-5 text-blue-600" />
          <h3 className="text-base font-medium text-gray-900">
            Pilih Konten untuk Dilampirkan
          </h3>
          {selectedContent.length > 0 && (
            <Badge variant="secondary">
              {selectedContent.length}/{maxSelection}
            </Badge>
          )}
        </div>
        <button
          className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
        >
          <X className="w-5 h-5" />
        </button>
      </div>

      {/* Search and Filters */}
      <div className="p-4 border-b border-gray-200 space-y-3">
        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <input
            type="text"
            placeholder="Cari artikel atau video..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        {/* Filter Toggle */}
        <button
          className="flex items-center space-x-2 text-sm text-gray-600 hover:text-gray-900"
        >
          <Filter className="w-4 h-4" />
          <span>Filter</span>
          <ChevronDown className={`w-4 h-4 transform transition-transform ${showFilters ? 'rotate-180' : ''}`} />
        </button>

        {/* Filters */}
        {showFilters && (
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">
                Kategori
              </label>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Semua Kategori</option>
                {categories.map(category => (
                  <option key={category.value} value={category.value}>
                    {category.icon} {category.label}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">
                Jenis
              </label>
              <select
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value as 'all' | 'article' | 'video')}
                className="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">Semua Jenis</option>
                <option value="article">📄 Artikel</option>
                <option value="video">🎥 Video</option>
              </select>
            </div>
          </div>
        )}
      </div>

      {/* Content List */}
      <div className="max-h-96 overflow-y-auto">
        {error && (
          <div className="p-4 text-center text-red-600">
            <p>{error}</p>
            <button
              className="mt-2 text-sm text-blue-600 hover:text-blue-800"
            >
              Coba Lagi
            </button>
          </div>
        )}

        {loading && content.length === 0 && (
          <div className="p-8 text-center">
            <div className="animate-spin w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full mx-auto mb-2"></div>
            <p className="text-sm text-gray-500">Memuat konten...</p>
          </div>
        )}

        {!loading && !error && content.length === 0 && (
          <div className="p-8 text-center text-gray-500">
            <FileText className="w-12 h-12 mx-auto mb-2 text-gray-300" />
            <p className="text-sm">Tidak ada konten ditemukan</p>
          </div>
        )}

        <div className="divide-y divide-gray-200">
          {content.map(item => {
            const isSelected = selectedContent.some(c => c.id === item.id)
            const isMaxReached = selectedContent.length >= maxSelection && !isSelected
            
            return (
              <div key={item.id} className="p-4 hover:bg-gray-50 transition-colors">
                <div className="flex items-start space-x-3">
                  {/* Checkbox */}
                  <div className="flex items-center pt-1">
                    <input
                      type="checkbox"
                      checked={isSelected}
                      onChange={() => handleContentToggle(item)}
                      disabled={isMaxReached}
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 disabled:opacity-50"
                    />
                  </div>

                  {/* Thumbnail */}
                   <div className="flex-shrink-0">
                     {item.thumbnailUrl && !imageErrors.has(item.id) ? (
                       <div className="w-16 h-12 rounded-lg overflow-hidden bg-gray-100">
                         <Image
                           src={item.thumbnailUrl}
                           alt={item.title}
                           width={64}
                           height={48}
                           className="w-full h-full object-cover"
                           onError={() => {
                             setImageErrors(prev => new Set(prev).add(item.id))
                           }}
                         />
                       </div>
                     ) : (
                       <div className="w-16 h-12 rounded-lg bg-gray-100 flex items-center justify-center">
                         {item.type === 'article' ? (
                           <FileText className="w-6 h-6 text-gray-400" />
                         ) : (
                           <Play className="w-6 h-6 text-gray-400" />
                         )}
                       </div>
                     )}
                   </div>

                  {/* Content Info */}
                  <div className="flex-1 min-w-0">
                    <div className="flex items-start justify-between">
                      <div className="flex-1 min-w-0">
                        <h4 className="text-sm font-medium text-gray-900 truncate">
                          {item.title}
                        </h4>
                        {item.description && (
                          <p className="text-xs text-gray-500 mt-1 line-clamp-2">
                            {item.description}
                          </p>
                        )}
                        <div className="flex items-center space-x-2 mt-2">
                          <Badge variant="outline">
                            {getCategoryIcon(item.category)} {getCategoryLabel(item.category)}
                          </Badge>
                          <Badge variant="secondary">
                            {item.type === 'article' ? '📄' : '🎥'} {item.type === 'article' ? 'Artikel' : 'Video'}
                          </Badge>
                          {item.type === 'video' && item.durationMinutes && (
                            <Badge variant="outline">
                              ⏱️ {item.durationMinutes}
                            </Badge>
                          )}
                        </div>
                      </div>
                      
                      {/* Actions */}
                      <div className="flex items-center space-x-1 ml-2">
                        <button
                          className="p-1 text-gray-400 hover:text-blue-600 transition-colors"
                          title="Preview"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        <button
                          className="p-1 text-gray-400 hover:text-blue-600 transition-colors"
                          title="Buka di tab baru"
                        >
                          <ExternalLink className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
                
                {isMaxReached && (
                  <p className="text-xs text-red-500 mt-2 ml-7">
                    Maksimal {maxSelection} konten dapat dipilih
                  </p>
                )}
              </div>
            )
          })}
        </div>

        {/* Load More */}
        {hasMore && !loading && content.length > 0 && (
          <div className="p-4 text-center border-t border-gray-200">
            <button
              onClick={loadMore}
              className="px-4 py-2 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-colors"
              Muat Lebih Banyak
            </button>
          </div>
        )}

        {loading && content.length > 0 && (
          <div className="p-4 text-center border-t border-gray-200">
            <div className="animate-spin w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full mx-auto"></div>
          </div>
        )}
      </div>

      {/* Footer */}
      {selectedContent.length > 0 && (
        <div className="p-4 border-t border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-600">
              {selectedContent.length} konten dipilih
            </span>
            <div className="space-x-2">
              <button
                onClick={clearSelection}
                className="px-3 py-1 text-xs text-red-600 hover:text-red-800 transition-colors"
                Hapus Semua
              </button>
              <button
                className="px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Selesai
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
  } catch (error) {
    console.error('ContentSelector error:', error)
    return (
      <div className={`bg-white border border-red-200 rounded-2xl p-4 ${className}`}>
        <div className="text-center text-red-600">
          <p className="text-sm">Gagal memuat konten</p>
          <button
            className="mt-2 px-3 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200"
          >
            Muat Ulang
          </button>
        </div>
      </div>
    )
  }
}
